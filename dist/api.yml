openapi: 3.0.0
info:
  description: Assignment 3.1 API
  version: "1.0.0"
  title: Assignment 3.1 API
  contact:
    email: avichaie@post.bgu.ac.il #can't add more emails?
tags: #???
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /register:  
    post:
      tags: 
        - authentication
      summary: register 
      description: register new user to system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new_user'
      responses:
        '201':
          description: "user {user_name} successfully added"
        '409':  
          description: "user could not be added, name taken."
        '400':
          description: "username or password weren't sent."
  /login:  
    post:
      tags: 
        - authentication
      summary: user log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        "200":
          description: "user {user_name} successfully logged in"
        "401":
          description: "Invalid username/password"
  /logout:  
    get:
      tags: 
        - authentication
      summary: user logout
      responses:
        "200":
          description: "user successfully logged out"
        "400":
          description: "failed to log out"
  /league/details:
    get:
      tags: 
        - league
      summary: get_league_details 
      description: fetch "cycle" and next match in Super Liga.
      responses:
        "200":
          description: "returned league details"
        "404":
          description: "couldn't supply league's details, league not found"
  /league/matches:
    get:
      tags: 
        - league
      summary: get_matches_in_league
      description: get all matches in SuperLiga. 
      responses:
        "200":
          description: "returned matches that match team id"
        "404":
          description: "couldn't supply league's details, league not found"
  /matches/{match_id}:
    get:
      tags: 
        - matches
      summary: get_match_by_id 
      parameters: 
      - in: "path"
        name: match_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned match that matches id"
        "404":
          description: "invalid match id"
  /users/union_rep/matches:
    post:
      tags: 
        - matches
        - union_rep
      summary: set_new_match 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new_match'
      responses:
        '201':
          description: "match successfully added"
        '400':
          description: "match could not be added"
  /users/union_rep/matches/{match_id}/event_log:
    post:
      tags: 
        - matches
        - union_rep
      summary: add_event_to_match 
      description: add new event to event log of match_id
      parameters:
      - name: match_id
        in: "path" 
        required: true
        schema:
           $ref: '#/components/schemas/new_game_event'
      responses:
        '201':
          description: "event added successfully"
        '404':
          description: "match could not be found"
  /players/{player_id}:
    get:
      tags: 
        - players
      summary: get_player_by_id 
      parameters: 
      - in: "path"
        name: player_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned player that matches player id"
        "404":
          description: "invalid player id"
  /users/{user_id}:   
    get:
      tags: 
        - users
      summary: get_user_by_id 
      parameters: 
      - in: "path"
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned user that matches user id"
        "404":
          description: "invalid user id"
  /teams/{team_id}:   
    get:
      tags: 
        - teams
      summary: get_team_by_id 
      parameters: 
      - in: "path"
        name: team_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned team that matches team id"
        "404":
          description: "invalid team id"
  /players/search/{player_name}:
    get:
      tags: 
        - search
      summary: get_player_by_name
      description: get player by full or partial name query. 
      parameters: 
      - in: "path"
        name: player_name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "returned players that match name query"
        "404":
          description: "invalid name query, could not find players"
  /teams/search/{team_name}:
    get:
      tags: 
        - teams
        - search
      summary: get_team_by_name
      description: get team by full or partial name query. 
      parameters: 
      - in: "path"
        name: team_name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "returned teams that match name query"
        "404":
          description: "invalid name query, could not find teams"
  /teams/{team_id}/matches:
    get:
      tags: 
        - teams
      summary: get_matches_by_team
      description: get all matches team has played in or will play in. 
      parameters: 
      - in: "path"
        name: team_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned matches that match team id"
        "404":
          description: "invalid team id, could not find matches"
  /users/favorites/{category_name}:
    get:
      tags: 
        - favorites
      summary: get_favorites 
      description: fetch all favorite {category_name}s of {user_id}
      parameters:
      - name: user_id
        in: cookie 
        required: true
        schema:
          type: integer
      - name: category_name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "The {category_name} was successfully saved as a favorite"
        "400":
          description: "invalid category name"
    post:
      tags: 
        - favorites
      summary: add_to_favorites
      description: fetch a {category_name} to {user_id}'s favorites
      parameters:
      - name: user_id
        in: cookie 
        required: true
        schema:
          type: integer
      - name: category_name
        in: path
        required: true
        description: currently supporting matches only
        schema:
          type: string
      responses:
        '200':
        "400":
          description: "invalid category name"
          
          
components:
  schemas:
    new_user:
      type: object
      properties:
        username:
          type: string
          pattern: '/^[a-zA-Z]+$/' #letters only?
          minLength: 3
          maxLength: 8
          # required: true
          example: 'tom'
        password:
          type: string
          pattern: '/[a-zA-Z]\d/g' #has number and letter
          minLength: 5
          maxLength: 10
          # required: true
          example: 'rob1'
        # confirmation_password: no idea how to confirm versus password
        first_name:
          type: string
          example: 'Widget'
        last_name:
          type: string
          example: 'Adapter'
        country: #do we need to enforce this further?
            type: string
            example: 'Kings Dominion'
        email:
          type: string
          format: email
        profile_pic:
          type: string
          format: URL
          example: 'https://www.some_domain.com/my_img.jpg'
    Login:
      type: object
      description: user info for login
      properties:
        username:
           type: string
           example: 'tom'
        password:
           type: string
           example: 'rob1'
    new_match:
      type: object
      properties:
        date:
          type: string
          format: date
          description: 'yyyy-mm-dd'
          example: '2012-12-22'
        hour:
          type: string
          description: hour-minutes in 4 digits format 
          minLength: 5
          maxLength: 5
          example: '03:59:12'
        home_team_name:
          type: string
          # required: true
          example: 'OB'
        away_team_name:
          type: string
          # required: true
          example: 'AGF'
        # court
    new_game_event:
      type: object
      properties:
        minute_in_game: #can also be a string with a name
          type: integer
          description: exact time during match in which the event occurred
          minimum: 0
          example: 35
        event_type:
          type: string
          description: possible events - Goal,Offside,Foul,Red-Card,Yellow-Card,Injury,Substitution. any other event will be labeled as "Other".
          example: 'Other'
        event_description:
          type: string
          example:  red card was given to messi for not being organized
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/t57268/Assignment_3.1_API/1.0.0