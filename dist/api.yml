openapi: 3.0.0
info:
  description: Assignment 3.1 API
  version: "1.0.0"
  title: Assignment 3.1 API
  contact:
    email: avichaie@post.bgu.ac.il #can't add more emails?
tags: #???
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /register:  
    post:
      tags: 
        - users
      summary: register 
      description: register new user to system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/new_user'
      responses:
        '201':
          description: "user successfully added"
        '400':
          description: "user could not be added"
  /login:  
    post:
      tags: 
        - users
      summary: user log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        "200":
          description: "user successful login"
        "400":
          description: "Invalid username/password"
  /users/{user_id}/favorites/{object_type}:
    get:
      tags: 
        - users
        - favorites
      summary: get_favorites 
      description: fetch all matchs / teams / players for user
      parameters: 
      - in: "path"
        name: user_id
        required: true
        schema:
          type: integer
      - in: "path"
        name: object_type
        required: true
        schema:
          type: string #verified at client-side
      responses:
        "200":
          description: "returned favorites"
        "400":
          description: "Invalid user ID  or object type supplied"
  /league/details:
    get:
      tags: 
        - league
      summary: get_league_details 
      description: fetch "cycle" and next match in Super Liga.
      responses:
        "200":
          description: "returned league details"
        "404":
          description: "couldn't supply league's details, league not found"
  /matches/{match_id}:
    get:
      tags: 
        - matches
      summary: get_match_by_id 
      parameters: 
      - in: "path"
        name: match_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned match that matches id"
        "404":
          description: "invalid match id"
  /coaches/{coach_id}:
    get:
      tags: 
        - coaches
      summary: get_coach_by_id 
      parameters: 
      - in: "path"
        name: coach_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned coach that matches coach id"
        "404":
          description: "invalid coach id"
  /players/{player_id}:
    get:
      tags: 
        - players
      summary: get_player_by_id 
      parameters: 
      - in: "path"
        name: player_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned player that matches player id"
        "404":
          description: "invalid player id"
  /users/{user_id}:   
    get:
      tags: 
        - users
      summary: get_user_by_id 
      parameters: 
      - in: "path"
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned user that matches user id"
        "404":
          description: "invalid user id"
  /teams/{team_id}:   
    get:
      tags: 
        - teams
      summary: get_team_by_id 
      parameters: 
      - in: "path"
        name: team_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned team that matches team id"
        "404":
          description: "invalid team id"
  /players/search/{player_name}:
    get:
      tags: 
        - players
        - search
      summary: get_player_by_name
      description: get player by full or partial name query. 
      parameters: 
      - in: "path"
        name: player_name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "returned players that match name query"
        "404":
          description: "invalid name query, could not find players"
  /coaches/search/{coach_name}:
    get:
      tags: 
        - coaches
        - search
      summary: get_coach_by_name
      description: get coach by full or partial name query. 
      parameters: 
      - in: "path"
        name: coach_name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "returned coaches that match name query"
        "404":
          description: "invalid name query, could not find coachs"
  /teams/search/{team_name}:
    get:
      tags: 
        - teams
        - search
      summary: get_team_by_name
      description: get team by full or partial name query. 
      parameters: 
      - in: "path"
        name: team_name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "returned teams that match name query"
        "404":
          description: "invalid name query, could not find teams"
  /teams/{team_id}/matches:
    get:
      tags: 
        - teams
        - matches
      summary: get_matches_by_team
      description: get all matches team has played in or will play in. 
      parameters: 
      - in: "path"
        name: team_id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: "returned matches that match team id"
        "404":
          description: "invalid team id, could not find matches"
  /users/{user_id}/favorites/matches:
    put:
      tags: 
        - users
        - favorites
      summary: register 
      description: register new user to system
      parameters:
      - name: "user_id"
        in: "path" #?
        required: true
        schema:
          type: "integer"
        # format: "int64"
      - name: "match_id"
        in: "query" #?
        description: "match to add to favorites matches of user"
        required: true
        schema:
          type: "integer"
        # format: "int64"
      responses:
        '201':
          description: "match successfully added to favorites"
        '404':
          description: "user or match could not be found"
  /users/{user_id}/favorites/players:
    put:
      tags: 
        - users
        - favorites
      summary: register 
      description: register new user to system
      parameters:
      - name: "user_id"
        in: "path" #?
        required: true
        schema:
          type: "integer"
        # format: "int64"
      - name: "player_id"
        in: "query" #?
        description: "player to add to favorites players of user"
        required: true
        schema:
          type: "integer"
        # format: "int64"
      responses:
        '201':
          description: "player successfully added to favorites"
        '404':
          description: "user or player could not be found"
  /users/{user_id}/favorites/teams:
    put:
      tags: 
        - users
        - favorites
      summary: register 
      description: register new user to system
      parameters:
      - name: "user_id"
        in: "path" #?
        required: true
        schema:
          type: "integer"
        # format: "int64"
      - name: "team_id"
        in: "query" #?
        description: "team to add to favorites teams of user"
        required: true
        schema:
          type: "integer"
        # format: "int64"
      responses:
        '201':
          description: "team successfully added to favorites"
        '404':
          description: "user or team could not be found"
          
          
          
components:
  schemas:
    new_user:
      type: object
      properties:
        username:
          type: string
          pattern: '/^[a-zA-Z]+$/' #letters only?
          minLength: 3
          maxLength: 8
          # required: true
          example: 'tom'
        password:
          type: string
          pattern: '/[a-zA-Z]\d/g' #has number and letter
          minLength: 5
          maxLength: 10
          # required: true
          example: 'rob1'
        # confirmation_password: no idea how to confirm versus password
        first_name:
          type: string
          example: 'Widget'
        last_name:
          type: string
          example: 'Adapter'
        country: #do we need to enforce this further?
            type: string
            example: 'Kings Dominion'
        email:
          type: string
          format: email
        profile_pic:
          type: string
          format: URL
          example: 'https://www.some_domain.com/my_img.jpg'
    Login:
      type: object
      description: user info for login
      properties:
        username:
           pattern: '/^[a-zA-Z]+$/' #letters only?
           minLength: 3
           maxLength: 8
           description: username must be between 3 to 8 chars and only letters
           example: 'tom'
        password:
          type: string
          pattern: '/[a-zA-Z]\d/g' #has number and letter
          minLength: 5
          maxLength: 10
          description: password between 5 to 10 chars, must consist of 1 digit and 1 special char
          example: 'rob1'